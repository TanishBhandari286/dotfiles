return {
    "L3MON4D3/LuaSnip",
    dependencies = { "rafamadriz/friendly-snippets" },
    config = function()
        local ls = require("luasnip")
        local s = ls.snippet
        local t = ls.text_node
        local i = ls.insert_node

        -- Load VS Code style snippets
        require("luasnip.loaders.from_vscode").lazy_load()

        -- Custom C++ snippets
        ls.add_snippets("cpp", {
            s("cpp", {
                t({ "#include<iostream>", "#include<vector>", "using namespace std;", "", "int main(){", "" }),
                i(1),
                t({ "", "", "return 0;", "}" }),
            }),
            s("pt", {
                t('cout<<"'),
                i(1),
                t('"<<endl;'),
            }),
            s("LS", {
                t({
                    "int LS(int arr[], int n, int target)",
                    "{",
                    "    int index;",
                    "    int i;",
                    "    for (i = 0; i <= n - 1; i++)",
                    "    {",
                    "        if (arr[i] == target)",
                    "        {",
                    "            index = i;",
                    "        }",
                    "    }",
                    "    return index;",
                    "}",
                }),
            }),
            s("IA", {
                t({
                    "void arrinput(int arr[], int n)",
                    "{",
                    "    for (int i = 0; i <= n - 1; i++)",
                    "    {",
                    '        cout << "Enter the " << i << "element :";',
                    "        cin >> arr[i];",
                    "    }",
                    "}",
                }),
            }),
            s("PA", {
                t({
                    "void arrPrint(int arr[], int n)",
                    "{",
                    "    for (int i = 0; i <= n - 1; i++)",
                    "    {",
                    '        cout << "printing " << i << "element of array" << endl;',
                    "        cout << arr[i];",
                    "    }",
                    "}",
                }),
            }),
            s("SS", {
                t({
                    "vector<int> selectionSort(vector<int>& nums) {",
                    "    for (int i = 0; i < nums.size() - 1; i++) {",
                    "        int minIndex = i;",
                    "        for (int j = i + 1; j < nums.size(); j++) {",
                    "            if (nums[j] < nums[minIndex]) {",
                    "                minIndex = j;",
                    "            }",
                    "        }",
                    "        if (minIndex != i) {",
                    "            swap(nums[minIndex], nums[i]);",
                    "        }",
                    "    }",
                    "    return nums;",
                    "}",
                }),
            }),
            s("BS", {
                t({
                    "vector<int> bubbleSort(vector<int>& nums) {",
                    "    int n = nums.size();",
                    "    for (int i = n - 1; i >= 0; i--) {",
                    "        bool didSwap = false;",
                    "        for (int j = 0; j <= i - 1; j++) {",
                    "            if (nums[j] > nums[j + 1]) {",
                    "                swap(nums[j], nums[j + 1]);",
                    "                didSwap = true;",
                    "            }",
                    "        }",
                    "        if (!didSwap) {",
                    "            break;",
                    "        }",
                    "    }",
                    "    return nums;",
                    "}",
                }),
            }),
            s("IS", {
                t({
                    "vector<int> insertionSort(vector<int>& nums) {",
                    "    int n = nums.size();",
                    "    for (int i = 0; i <= n - 1; i++) {",
                    "        int j = i;",
                    "        while (j > 0 && nums[j - 1] > nums[j]) {",
                    "            swap(nums[j - 1], nums[j]);",
                    "            j--;",
                    "        }",
                    "    }",
                    "    return nums;",
                    "}",
                }),
            }),
            s("QS", {
                t({
                    "int partition(vector<int>& arr, int low, int high) {",
                    "    int randomIndex = low + rand() % (high - low + 1);",
                    "    swap(arr[low], arr[randomIndex]);",
                    "    int pivot = arr[low];",
                    "    int i = low;",
                    "    int j = high;",
                    "    while (i < j) {",
                    "        while (arr[i] <= pivot && i <= high - 1) {",
                    "            i++;",
                    "        }",
                    "        while (arr[j] > pivot && j >= low + 1) {",
                    "            j--;",
                    "        }",
                    "        if (i < j) swap(arr[i], arr[j]);",
                    "    }",
                    "    swap(arr[low], arr[j]);",
                    "    return j;",
                    "}",
                    "",
                    "void quickSortHelper(vector<int>& arr, int low, int high) {",
                    "    if (low < high) {",
                    "        int pIndex = partition(arr, low, high);",
                    "        quickSortHelper(arr, low, pIndex - 1);",
                    "        quickSortHelper(arr, pIndex + 1, high);",
                    "    }",
                    "}",
                    "",
                    "vector<int> quickSort(vector<int>& nums) {",
                    "    int n = nums.size();",
                    "    quickSortHelper(nums, 0, n - 1);",
                    "    return nums;",
                    "}",
                }),
            }),
            s("bins", {
                t({
                    "int binary_search(int arr[], int size, int target) {",
                    "    int start = 0;",
                    "    int end = size - 1;",
                    "    int mid = (start + end) / 2;",
                    "",
                    "    while (start <= end) {",
                    "        if (arr[mid] == target) {",
                    "            return mid;",
                    "        } else if (target > arr[mid]) {",
                    "            start = mid + 1;",
                    "        } else if (target < arr[mid]) {",
                    "            end = mid - 1;",
                    "        }",
                    "        mid = (start + end) / 2;",
                    "    }",
                    "    return -1;",
                    "}",
                }),
            }),
            s("MS", {
                t({
                    "void merge(vector<int> &arr, int low, int mid, int high) {",
                    "    vector<int> temp;",
                    "    int left = low;",
                    "    int right = mid + 1;",
                    "    while (left <= mid && right <= high) {",
                    "        if (arr[left] <= arr[right]) {",
                    "            temp.push_back(arr[left]);",
                    "            left++;",
                    "        }",
                    "        else {",
                    "            temp.push_back(arr[right]);",
                    "            right++;",
                    "        }",
                    "    }",
                    "    while (left <= mid) {",
                    "        temp.push_back(arr[left]);",
                    "        left++;",
                    "    }",
                    "    while (right <= high) {",
                    "        temp.push_back(arr[right]);",
                    "        right++;",
                    "    }",
                    "    for (int i = low; i <= high; i++) {",
                    "        arr[i] = temp[i - low];",
                    "    }",
                    "}",
                    "",
                    "void mergeSortHelper(vector<int> &arr, int low, int high){",
                    "    if (low >= high)",
                    "        return;",
                    "    int mid = (low + high) / 2;",
                    "    mergeSortHelper(arr, low, mid);",
                    "    mergeSortHelper(arr, mid + 1, high);",
                    "    merge(arr, low, mid, high);",
                    "}",
                    "",
                    "vector<int> mergeSort(vector<int> &nums) {",
                    "    int n = nums.size();",
                    "    mergeSortHelper(nums, 0, n-1);",
                    "    return nums;",
                    "}",
                }),
            }),
        })
    end,
}
